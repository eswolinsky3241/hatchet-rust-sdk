/*
 * Hatchet API
 *
 * The Hatchet API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::clients::rest::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct V1WebhookList200ResponseRowsInner {
    #[serde(rename = "metadata")]
    pub metadata: Box<models::V1TaskGet200ResponseMetadata>,
    /// The ID of the tenant associated with this webhook.
    #[serde(rename = "tenantId")]
    pub tenant_id: String,
    /// The name of the webhook
    #[serde(rename = "name")]
    pub name: String,
    /// The name of the source for this webhook
    #[serde(rename = "sourceName")]
    pub source_name: SourceName,
    /// The CEL expression to use for the event key. This is used to create the event key from the webhook payload.
    #[serde(rename = "eventKeyExpression")]
    pub event_key_expression: String,
    /// The type of authentication to use for the webhook
    #[serde(rename = "authType")]
    pub auth_type: AuthType,
}

impl V1WebhookList200ResponseRowsInner {
    pub fn new(
        metadata: models::V1TaskGet200ResponseMetadata,
        tenant_id: String,
        name: String,
        source_name: SourceName,
        event_key_expression: String,
        auth_type: AuthType,
    ) -> V1WebhookList200ResponseRowsInner {
        V1WebhookList200ResponseRowsInner {
            metadata: Box::new(metadata),
            tenant_id,
            name,
            source_name,
            event_key_expression,
            auth_type,
        }
    }
}
/// The name of the source for this webhook
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum SourceName {
    #[serde(rename = "GENERIC")]
    Generic,
    #[serde(rename = "GITHUB")]
    Github,
    #[serde(rename = "STRIPE")]
    Stripe,
}

impl Default for SourceName {
    fn default() -> SourceName {
        Self::Generic
    }
}
/// The type of authentication to use for the webhook
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum AuthType {
    #[serde(rename = "BASIC")]
    Basic,
    #[serde(rename = "API_KEY")]
    ApiKey,
    #[serde(rename = "HMAC")]
    Hmac,
}

impl Default for AuthType {
    fn default() -> AuthType {
        Self::Basic
    }
}
