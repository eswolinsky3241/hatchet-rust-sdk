/*
 * Hatchet API
 *
 * The Hatchet API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::clients::rest::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct UserListTenantInvites200ResponseRowsInner {
    #[serde(rename = "metadata")]
    pub metadata: Box<models::V1TaskGet200ResponseMetadata>,
    /// The email of the user to invite.
    #[serde(rename = "email")]
    pub email: String,
    /// The role of the user in the tenant.
    #[serde(rename = "role")]
    pub role: Role,
    /// The tenant id associated with this tenant invite.
    #[serde(rename = "tenantId")]
    pub tenant_id: String,
    /// The tenant name for the tenant.
    #[serde(rename = "tenantName", skip_serializing_if = "Option::is_none")]
    pub tenant_name: Option<String>,
    /// The time that this invite expires.
    #[serde(rename = "expires")]
    pub expires: String,
}

impl UserListTenantInvites200ResponseRowsInner {
    pub fn new(
        metadata: models::V1TaskGet200ResponseMetadata,
        email: String,
        role: Role,
        tenant_id: String,
        expires: String,
    ) -> UserListTenantInvites200ResponseRowsInner {
        UserListTenantInvites200ResponseRowsInner {
            metadata: Box::new(metadata),
            email,
            role,
            tenant_id,
            tenant_name: None,
            expires,
        }
    }
}
/// The role of the user in the tenant.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Role {
    #[serde(rename = "OWNER")]
    Owner,
    #[serde(rename = "ADMIN")]
    Admin,
    #[serde(rename = "MEMBER")]
    Member,
}

impl Default for Role {
    fn default() -> Role {
        Self::Owner
    }
}
