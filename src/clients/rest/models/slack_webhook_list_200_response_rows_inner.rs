/*
 * Hatchet API
 *
 * The Hatchet API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::clients::rest::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct SlackWebhookList200ResponseRowsInner {
    #[serde(rename = "metadata")]
    pub metadata: Box<models::V1TaskGet200ResponseMetadata>,
    /// The unique identifier for the tenant that the SNS integration belongs to.
    #[serde(rename = "tenantId")]
    pub tenant_id: uuid::Uuid,
    /// The team name associated with this slack webhook.
    #[serde(rename = "teamName")]
    pub team_name: String,
    /// The team id associated with this slack webhook.
    #[serde(rename = "teamId")]
    pub team_id: String,
    /// The channel name associated with this slack webhook.
    #[serde(rename = "channelName")]
    pub channel_name: String,
    /// The channel id associated with this slack webhook.
    #[serde(rename = "channelId")]
    pub channel_id: String,
}

impl SlackWebhookList200ResponseRowsInner {
    pub fn new(metadata: models::V1TaskGet200ResponseMetadata, tenant_id: uuid::Uuid, team_name: String, team_id: String, channel_name: String, channel_id: String) -> SlackWebhookList200ResponseRowsInner {
        SlackWebhookList200ResponseRowsInner {
            metadata: Box::new(metadata),
            tenant_id,
            team_name,
            team_id,
            channel_name,
            channel_id,
        }
    }
}

