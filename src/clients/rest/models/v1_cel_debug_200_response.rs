/*
 * Hatchet API
 *
 * The Hatchet API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::clients::rest::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct V1CelDebug200Response {
    /// The status of the CEL evaluation
    #[serde(rename = "status")]
    pub status: Status,
    /// The result of the CEL expression evaluation, if successful
    #[serde(rename = "output", skip_serializing_if = "Option::is_none")]
    pub output: Option<bool>,
    /// The error message if the evaluation failed
    #[serde(rename = "error", skip_serializing_if = "Option::is_none")]
    pub error: Option<String>,
}

impl V1CelDebug200Response {
    pub fn new(status: Status) -> V1CelDebug200Response {
        V1CelDebug200Response {
            status,
            output: None,
            error: None,
        }
    }
}
/// The status of the CEL evaluation
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Status {
    #[serde(rename = "SUCCESS")]
    Success,
    #[serde(rename = "ERROR")]
    Error,
}

impl Default for Status {
    fn default() -> Status {
        Self::Success
    }
}

