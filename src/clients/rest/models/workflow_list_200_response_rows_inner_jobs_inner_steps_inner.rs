/*
 * Hatchet API
 *
 * The Hatchet API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::clients::rest::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct WorkflowList200ResponseRowsInnerJobsInnerStepsInner {
    #[serde(rename = "metadata")]
    pub metadata: Box<models::V1TaskGet200ResponseMetadata>,
    /// The readable id of the step.
    #[serde(rename = "readableId")]
    pub readable_id: String,
    #[serde(rename = "tenantId")]
    pub tenant_id: String,
    #[serde(rename = "jobId")]
    pub job_id: String,
    #[serde(rename = "action")]
    pub action: String,
    /// The timeout of the step.
    #[serde(rename = "timeout", skip_serializing_if = "Option::is_none")]
    pub timeout: Option<String>,
    #[serde(rename = "children", skip_serializing_if = "Option::is_none")]
    pub children: Option<Vec<String>>,
    #[serde(rename = "parents", skip_serializing_if = "Option::is_none")]
    pub parents: Option<Vec<String>>,
}

impl WorkflowList200ResponseRowsInnerJobsInnerStepsInner {
    pub fn new(
        metadata: models::V1TaskGet200ResponseMetadata,
        readable_id: String,
        tenant_id: String,
        job_id: String,
        action: String,
    ) -> WorkflowList200ResponseRowsInnerJobsInnerStepsInner {
        WorkflowList200ResponseRowsInnerJobsInnerStepsInner {
            metadata: Box::new(metadata),
            readable_id,
            tenant_id,
            job_id,
            action,
            timeout: None,
            children: None,
            parents: None,
        }
    }
}
