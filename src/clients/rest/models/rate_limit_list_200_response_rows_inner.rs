/*
 * Hatchet API
 *
 * The Hatchet API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::clients::rest::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct RateLimitList200ResponseRowsInner {
    /// The key for the rate limit.
    #[serde(rename = "key")]
    pub key: String,
    /// The ID of the tenant associated with this rate limit.
    #[serde(rename = "tenantId")]
    pub tenant_id: String,
    /// The maximum number of requests allowed within the window.
    #[serde(rename = "limitValue")]
    pub limit_value: i32,
    /// The current number of requests made within the window.
    #[serde(rename = "value")]
    pub value: i32,
    /// The window of time in which the limitValue is enforced.
    #[serde(rename = "window")]
    pub window: String,
    /// The last time the rate limit was refilled.
    #[serde(rename = "lastRefill")]
    pub last_refill: String,
}

impl RateLimitList200ResponseRowsInner {
    pub fn new(key: String, tenant_id: String, limit_value: i32, value: i32, window: String, last_refill: String) -> RateLimitList200ResponseRowsInner {
        RateLimitList200ResponseRowsInner {
            key,
            tenant_id,
            limit_value,
            value,
            window,
            last_refill,
        }
    }
}

