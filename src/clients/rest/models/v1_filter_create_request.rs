/*
 * Hatchet API
 *
 * The Hatchet API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::clients::rest::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct V1FilterCreateRequest {
    /// The workflow id
    #[serde(rename = "workflowId")]
    pub workflow_id: uuid::Uuid,
    /// The expression for the filter
    #[serde(rename = "expression")]
    pub expression: String,
    /// The scope associated with this filter. Used for subsetting candidate filters at evaluation time
    #[serde(rename = "scope")]
    pub scope: String,
    /// The payload for the filter
    #[serde(rename = "payload", skip_serializing_if = "Option::is_none")]
    pub payload: Option<serde_json::Value>,
}

impl V1FilterCreateRequest {
    pub fn new(workflow_id: uuid::Uuid, expression: String, scope: String) -> V1FilterCreateRequest {
        V1FilterCreateRequest {
            workflow_id,
            expression,
            scope,
            payload: None,
        }
    }
}

