/*
 * Hatchet API
 *
 * The Hatchet API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::clients::rest::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct WorkflowList200ResponseRowsInnerJobsInner {
    #[serde(rename = "metadata")]
    pub metadata: Box<models::V1TaskGet200ResponseMetadata>,
    #[serde(rename = "tenantId")]
    pub tenant_id: String,
    #[serde(rename = "versionId")]
    pub version_id: String,
    #[serde(rename = "name")]
    pub name: String,
    /// The description of the job.
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(rename = "steps")]
    pub steps: Vec<models::WorkflowList200ResponseRowsInnerJobsInnerStepsInner>,
    /// The timeout of the job.
    #[serde(rename = "timeout", skip_serializing_if = "Option::is_none")]
    pub timeout: Option<String>,
}

impl WorkflowList200ResponseRowsInnerJobsInner {
    pub fn new(metadata: models::V1TaskGet200ResponseMetadata, tenant_id: String, version_id: String, name: String, steps: Vec<models::WorkflowList200ResponseRowsInnerJobsInnerStepsInner>) -> WorkflowList200ResponseRowsInnerJobsInner {
        WorkflowList200ResponseRowsInnerJobsInner {
            metadata: Box::new(metadata),
            tenant_id,
            version_id,
            name,
            description: None,
            steps,
            timeout: None,
        }
    }
}

