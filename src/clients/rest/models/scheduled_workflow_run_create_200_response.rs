/*
 * Hatchet API
 *
 * The Hatchet API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::clients::rest::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ScheduledWorkflowRunCreate200Response {
    #[serde(rename = "metadata")]
    pub metadata: Box<models::V1TaskGet200ResponseMetadata>,
    #[serde(rename = "tenantId")]
    pub tenant_id: String,
    #[serde(rename = "workflowVersionId")]
    pub workflow_version_id: String,
    #[serde(rename = "workflowId")]
    pub workflow_id: String,
    #[serde(rename = "workflowName")]
    pub workflow_name: String,
    #[serde(rename = "triggerAt")]
    pub trigger_at: String,
    #[serde(rename = "input", skip_serializing_if = "Option::is_none")]
    pub input: Option<std::collections::HashMap<String, serde_json::Value>>,
    #[serde(rename = "additionalMetadata", skip_serializing_if = "Option::is_none")]
    pub additional_metadata: Option<std::collections::HashMap<String, serde_json::Value>>,
    #[serde(
        rename = "workflowRunCreatedAt",
        skip_serializing_if = "Option::is_none"
    )]
    pub workflow_run_created_at: Option<String>,
    #[serde(rename = "workflowRunName", skip_serializing_if = "Option::is_none")]
    pub workflow_run_name: Option<String>,
    #[serde(rename = "workflowRunStatus", skip_serializing_if = "Option::is_none")]
    pub workflow_run_status: Option<WorkflowRunStatus>,
    #[serde(rename = "workflowRunId", skip_serializing_if = "Option::is_none")]
    pub workflow_run_id: Option<uuid::Uuid>,
    #[serde(rename = "method")]
    pub method: Method,
    #[serde(rename = "priority", skip_serializing_if = "Option::is_none")]
    pub priority: Option<i32>,
}

impl ScheduledWorkflowRunCreate200Response {
    pub fn new(
        metadata: models::V1TaskGet200ResponseMetadata,
        tenant_id: String,
        workflow_version_id: String,
        workflow_id: String,
        workflow_name: String,
        trigger_at: String,
        method: Method,
    ) -> ScheduledWorkflowRunCreate200Response {
        ScheduledWorkflowRunCreate200Response {
            metadata: Box::new(metadata),
            tenant_id,
            workflow_version_id,
            workflow_id,
            workflow_name,
            trigger_at,
            input: None,
            additional_metadata: None,
            workflow_run_created_at: None,
            workflow_run_name: None,
            workflow_run_status: None,
            workflow_run_id: None,
            method,
            priority: None,
        }
    }
}
///
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum WorkflowRunStatus {
    #[serde(rename = "PENDING")]
    Pending,
    #[serde(rename = "RUNNING")]
    Running,
    #[serde(rename = "SUCCEEDED")]
    Succeeded,
    #[serde(rename = "FAILED")]
    Failed,
    #[serde(rename = "CANCELLED")]
    Cancelled,
    #[serde(rename = "QUEUED")]
    Queued,
    #[serde(rename = "BACKOFF")]
    Backoff,
}

impl Default for WorkflowRunStatus {
    fn default() -> WorkflowRunStatus {
        Self::Pending
    }
}
///
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Method {
    #[serde(rename = "DEFAULT")]
    Default,
    #[serde(rename = "API")]
    Api,
}

impl Default for Method {
    fn default() -> Method {
        Self::Default
    }
}
