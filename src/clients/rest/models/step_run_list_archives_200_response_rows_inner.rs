/*
 * Hatchet API
 *
 * The Hatchet API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::clients::rest::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct StepRunListArchives200ResponseRowsInner {
    #[serde(rename = "stepRunId")]
    pub step_run_id: String,
    #[serde(rename = "order")]
    pub order: i32,
    #[serde(rename = "input", skip_serializing_if = "Option::is_none")]
    pub input: Option<String>,
    #[serde(rename = "output", skip_serializing_if = "Option::is_none")]
    pub output: Option<String>,
    #[serde(rename = "startedAt", skip_serializing_if = "Option::is_none")]
    pub started_at: Option<String>,
    #[serde(rename = "error", skip_serializing_if = "Option::is_none")]
    pub error: Option<String>,
    #[serde(rename = "retryCount")]
    pub retry_count: i32,
    #[serde(rename = "createdAt")]
    pub created_at: String,
    #[serde(rename = "startedAtEpoch", skip_serializing_if = "Option::is_none")]
    pub started_at_epoch: Option<i32>,
    #[serde(rename = "finishedAt", skip_serializing_if = "Option::is_none")]
    pub finished_at: Option<String>,
    #[serde(rename = "finishedAtEpoch", skip_serializing_if = "Option::is_none")]
    pub finished_at_epoch: Option<i32>,
    #[serde(rename = "timeoutAt", skip_serializing_if = "Option::is_none")]
    pub timeout_at: Option<String>,
    #[serde(rename = "timeoutAtEpoch", skip_serializing_if = "Option::is_none")]
    pub timeout_at_epoch: Option<i32>,
    #[serde(rename = "cancelledAt", skip_serializing_if = "Option::is_none")]
    pub cancelled_at: Option<String>,
    #[serde(rename = "cancelledAtEpoch", skip_serializing_if = "Option::is_none")]
    pub cancelled_at_epoch: Option<i32>,
    #[serde(rename = "cancelledReason", skip_serializing_if = "Option::is_none")]
    pub cancelled_reason: Option<String>,
    #[serde(rename = "cancelledError", skip_serializing_if = "Option::is_none")]
    pub cancelled_error: Option<String>,
}

impl StepRunListArchives200ResponseRowsInner {
    pub fn new(step_run_id: String, order: i32, retry_count: i32, created_at: String) -> StepRunListArchives200ResponseRowsInner {
        StepRunListArchives200ResponseRowsInner {
            step_run_id,
            order,
            input: None,
            output: None,
            started_at: None,
            error: None,
            retry_count,
            created_at,
            started_at_epoch: None,
            finished_at: None,
            finished_at_epoch: None,
            timeout_at: None,
            timeout_at_epoch: None,
            cancelled_at: None,
            cancelled_at_epoch: None,
            cancelled_reason: None,
            cancelled_error: None,
        }
    }
}

