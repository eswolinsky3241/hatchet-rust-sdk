/*
 * Hatchet API
 *
 * The Hatchet API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::clients::rest::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct StepRunListEvents200ResponseRowsInner {
    #[serde(rename = "id")]
    pub id: i32,
    #[serde(rename = "timeFirstSeen")]
    pub time_first_seen: String,
    #[serde(rename = "timeLastSeen")]
    pub time_last_seen: String,
    #[serde(rename = "stepRunId", skip_serializing_if = "Option::is_none")]
    pub step_run_id: Option<String>,
    #[serde(rename = "workflowRunId", skip_serializing_if = "Option::is_none")]
    pub workflow_run_id: Option<String>,
    #[serde(rename = "reason")]
    pub reason: Reason,
    #[serde(rename = "severity")]
    pub severity: Severity,
    #[serde(rename = "message")]
    pub message: String,
    #[serde(rename = "count")]
    pub count: i32,
    #[serde(rename = "data", skip_serializing_if = "Option::is_none")]
    pub data: Option<serde_json::Value>,
}

impl StepRunListEvents200ResponseRowsInner {
    pub fn new(id: i32, time_first_seen: String, time_last_seen: String, reason: Reason, severity: Severity, message: String, count: i32) -> StepRunListEvents200ResponseRowsInner {
        StepRunListEvents200ResponseRowsInner {
            id,
            time_first_seen,
            time_last_seen,
            step_run_id: None,
            workflow_run_id: None,
            reason,
            severity,
            message,
            count,
            data: None,
        }
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Reason {
    #[serde(rename = "REQUEUED_NO_WORKER")]
    RequeuedNoWorker,
    #[serde(rename = "REQUEUED_RATE_LIMIT")]
    RequeuedRateLimit,
    #[serde(rename = "SCHEDULING_TIMED_OUT")]
    SchedulingTimedOut,
    #[serde(rename = "ASSIGNED")]
    Assigned,
    #[serde(rename = "STARTED")]
    Started,
    #[serde(rename = "ACKNOWLEDGED")]
    Acknowledged,
    #[serde(rename = "FINISHED")]
    Finished,
    #[serde(rename = "FAILED")]
    Failed,
    #[serde(rename = "RETRYING")]
    Retrying,
    #[serde(rename = "CANCELLED")]
    Cancelled,
    #[serde(rename = "TIMEOUT_REFRESHED")]
    TimeoutRefreshed,
    #[serde(rename = "REASSIGNED")]
    Reassigned,
    #[serde(rename = "TIMED_OUT")]
    TimedOut,
    #[serde(rename = "SLOT_RELEASED")]
    SlotReleased,
    #[serde(rename = "RETRIED_BY_USER")]
    RetriedByUser,
    #[serde(rename = "WORKFLOW_RUN_GROUP_KEY_SUCCEEDED")]
    WorkflowRunGroupKeySucceeded,
    #[serde(rename = "WORKFLOW_RUN_GROUP_KEY_FAILED")]
    WorkflowRunGroupKeyFailed,
}

impl Default for Reason {
    fn default() -> Reason {
        Self::RequeuedNoWorker
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Severity {
    #[serde(rename = "INFO")]
    Info,
    #[serde(rename = "WARNING")]
    Warning,
    #[serde(rename = "CRITICAL")]
    Critical,
}

impl Default for Severity {
    fn default() -> Severity {
        Self::Info
    }
}

