/*
 * Hatchet API
 *
 * The Hatchet API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::clients::rest::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct TenantResourcePolicyGet200ResponseLimitsInner {
    #[serde(rename = "metadata")]
    pub metadata: Box<models::V1TaskGet200ResponseMetadata>,
    /// The resource associated with this limit.
    #[serde(rename = "resource")]
    pub resource: Resource,
    /// The limit associated with this limit.
    #[serde(rename = "limitValue")]
    pub limit_value: i32,
    /// The alarm value associated with this limit to warn of approaching limit value.
    #[serde(rename = "alarmValue", skip_serializing_if = "Option::is_none")]
    pub alarm_value: Option<i32>,
    /// The current value associated with this limit.
    #[serde(rename = "value")]
    pub value: i32,
    /// The meter window for the limit. (i.e. 1 day, 1 week, 1 month)
    #[serde(rename = "window", skip_serializing_if = "Option::is_none")]
    pub window: Option<String>,
    /// The last time the limit was refilled.
    #[serde(rename = "lastRefill", skip_serializing_if = "Option::is_none")]
    pub last_refill: Option<String>,
}

impl TenantResourcePolicyGet200ResponseLimitsInner {
    pub fn new(
        metadata: models::V1TaskGet200ResponseMetadata,
        resource: Resource,
        limit_value: i32,
        value: i32,
    ) -> TenantResourcePolicyGet200ResponseLimitsInner {
        TenantResourcePolicyGet200ResponseLimitsInner {
            metadata: Box::new(metadata),
            resource,
            limit_value,
            alarm_value: None,
            value,
            window: None,
            last_refill: None,
        }
    }
}
/// The resource associated with this limit.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Resource {
    #[serde(rename = "WORKER")]
    Worker,
    #[serde(rename = "WORKER_SLOT")]
    WorkerSlot,
    #[serde(rename = "EVENT")]
    Event,
    #[serde(rename = "WORKFLOW_RUN")]
    WorkflowRun,
    #[serde(rename = "TASK_RUN")]
    TaskRun,
    #[serde(rename = "CRON")]
    Cron,
    #[serde(rename = "SCHEDULE")]
    Schedule,
}

impl Default for Resource {
    fn default() -> Resource {
        Self::Worker
    }
}
