/*
 * Hatchet API
 *
 * The Hatchet API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::clients::rest::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct V1WorkflowRunGetTimings200ResponseRowsInner {
    #[serde(rename = "metadata")]
    pub metadata: Box<models::V1TaskGet200ResponseMetadata>,
    /// The depth of the task in the waterfall.
    #[serde(rename = "depth")]
    pub depth: i32,
    #[serde(rename = "status")]
    pub status: Status,
    /// The display name of the task run.
    #[serde(rename = "taskDisplayName")]
    pub task_display_name: String,
    /// The external ID of the task.
    #[serde(rename = "taskExternalId")]
    pub task_external_id: uuid::Uuid,
    /// The ID of the task.
    #[serde(rename = "taskId")]
    pub task_id: i32,
    /// The timestamp the task was inserted.
    #[serde(rename = "taskInsertedAt")]
    pub task_inserted_at: String,
    /// The ID of the tenant.
    #[serde(rename = "tenantId")]
    pub tenant_id: uuid::Uuid,
    /// The external ID of the parent task.
    #[serde(rename = "parentTaskExternalId", skip_serializing_if = "Option::is_none")]
    pub parent_task_external_id: Option<uuid::Uuid>,
    /// The timestamp the task run was queued.
    #[serde(rename = "queuedAt", skip_serializing_if = "Option::is_none")]
    pub queued_at: Option<String>,
    /// The timestamp the task run started.
    #[serde(rename = "startedAt", skip_serializing_if = "Option::is_none")]
    pub started_at: Option<String>,
    /// The timestamp the task run finished.
    #[serde(rename = "finishedAt", skip_serializing_if = "Option::is_none")]
    pub finished_at: Option<String>,
    /// The external ID of the workflow run.
    #[serde(rename = "workflowRunId", skip_serializing_if = "Option::is_none")]
    pub workflow_run_id: Option<uuid::Uuid>,
    /// The number of retries of the task.
    #[serde(rename = "retryCount", skip_serializing_if = "Option::is_none")]
    pub retry_count: Option<i32>,
    /// The attempt number of the task.
    #[serde(rename = "attempt", skip_serializing_if = "Option::is_none")]
    pub attempt: Option<i32>,
}

impl V1WorkflowRunGetTimings200ResponseRowsInner {
    pub fn new(metadata: models::V1TaskGet200ResponseMetadata, depth: i32, status: Status, task_display_name: String, task_external_id: uuid::Uuid, task_id: i32, task_inserted_at: String, tenant_id: uuid::Uuid) -> V1WorkflowRunGetTimings200ResponseRowsInner {
        V1WorkflowRunGetTimings200ResponseRowsInner {
            metadata: Box::new(metadata),
            depth,
            status,
            task_display_name,
            task_external_id,
            task_id,
            task_inserted_at,
            tenant_id,
            parent_task_external_id: None,
            queued_at: None,
            started_at: None,
            finished_at: None,
            workflow_run_id: None,
            retry_count: None,
            attempt: None,
        }
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Status {
    #[serde(rename = "QUEUED")]
    Queued,
    #[serde(rename = "RUNNING")]
    Running,
    #[serde(rename = "COMPLETED")]
    Completed,
    #[serde(rename = "CANCELLED")]
    Cancelled,
    #[serde(rename = "FAILED")]
    Failed,
}

impl Default for Status {
    fn default() -> Status {
        Self::Queued
    }
}

