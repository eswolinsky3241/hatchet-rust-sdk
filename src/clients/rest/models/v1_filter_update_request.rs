/*
 * Hatchet API
 *
 * The Hatchet API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::clients::rest::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct V1FilterUpdateRequest {
    /// The expression for the filter
    #[serde(rename = "expression", skip_serializing_if = "Option::is_none")]
    pub expression: Option<String>,
    /// The scope associated with this filter. Used for subsetting candidate filters at evaluation time
    #[serde(rename = "scope", skip_serializing_if = "Option::is_none")]
    pub scope: Option<String>,
    /// The payload for the filter
    #[serde(rename = "payload", skip_serializing_if = "Option::is_none")]
    pub payload: Option<serde_json::Value>,
}

impl V1FilterUpdateRequest {
    pub fn new() -> V1FilterUpdateRequest {
        V1FilterUpdateRequest {
            expression: None,
            scope: None,
            payload: None,
        }
    }
}
