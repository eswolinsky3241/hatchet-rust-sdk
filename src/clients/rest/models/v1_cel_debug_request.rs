/*
 * Hatchet API
 *
 * The Hatchet API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::clients::rest::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct V1CelDebugRequest {
    /// The CEL expression to evaluate
    #[serde(rename = "expression")]
    pub expression: String,
    /// The input, which simulates the workflow run input
    #[serde(rename = "input")]
    pub input: serde_json::Value,
    /// The filter payload, which simulates a payload set on a previous-created filter
    #[serde(rename = "filterPayload", skip_serializing_if = "Option::is_none")]
    pub filter_payload: Option<serde_json::Value>,
    /// Additional metadata, which simulates metadata that could be sent with an event or a workflow run
    #[serde(rename = "additionalMetadata", skip_serializing_if = "Option::is_none")]
    pub additional_metadata: Option<serde_json::Value>,
}

impl V1CelDebugRequest {
    pub fn new(expression: String, input: serde_json::Value) -> V1CelDebugRequest {
        V1CelDebugRequest {
            expression,
            input,
            filter_payload: None,
            additional_metadata: None,
        }
    }
}

