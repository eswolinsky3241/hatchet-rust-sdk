/*
 * Hatchet API
 *
 * The Hatchet API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::clients::rest::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct V1WorkflowRunCreate200Response {
    #[serde(rename = "run")]
    pub run: Box<models::V1WorkflowRunCreate200ResponseRun>,
    /// The list of task events for the workflow run
    #[serde(rename = "taskEvents")]
    pub task_events: Vec<models::V1TaskEventList200ResponseRowsInner>,
    #[serde(rename = "shape")]
    pub shape: Vec<models::V1WorkflowRunCreate200ResponseShapeInner>,
    #[serde(rename = "tasks")]
    pub tasks: Vec<models::V1TaskGet200ResponseChildrenInner>,
    #[serde(rename = "workflowConfig", skip_serializing_if = "Option::is_none")]
    pub workflow_config: Option<serde_json::Value>,
}

impl V1WorkflowRunCreate200Response {
    pub fn new(
        run: models::V1WorkflowRunCreate200ResponseRun,
        task_events: Vec<models::V1TaskEventList200ResponseRowsInner>,
        shape: Vec<models::V1WorkflowRunCreate200ResponseShapeInner>,
        tasks: Vec<models::V1TaskGet200ResponseChildrenInner>,
    ) -> V1WorkflowRunCreate200Response {
        V1WorkflowRunCreate200Response {
            run: Box::new(run),
            task_events,
            shape,
            tasks,
            workflow_config: None,
        }
    }
}
