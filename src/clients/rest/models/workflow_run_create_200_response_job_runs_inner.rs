/*
 * Hatchet API
 *
 * The Hatchet API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::clients::rest::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct WorkflowRunCreate200ResponseJobRunsInner {
    #[serde(rename = "metadata")]
    pub metadata: Box<models::V1TaskGet200ResponseMetadata>,
    #[serde(rename = "tenantId")]
    pub tenant_id: String,
    #[serde(rename = "workflowRunId")]
    pub workflow_run_id: String,
    #[serde(rename = "workflowRun", skip_serializing_if = "Option::is_none")]
    pub workflow_run: Option<Box<models::WorkflowRunCreate200ResponseJobRunsInnerWorkflowRun>>,
    #[serde(rename = "jobId")]
    pub job_id: String,
    #[serde(rename = "job", skip_serializing_if = "Option::is_none")]
    pub job: Option<Box<models::WorkflowList200ResponseRowsInnerJobsInner>>,
    #[serde(rename = "tickerId", skip_serializing_if = "Option::is_none")]
    pub ticker_id: Option<String>,
    #[serde(rename = "stepRuns", skip_serializing_if = "Option::is_none")]
    pub step_runs: Option<Vec<models::WorkflowRunCreate200ResponseJobRunsInnerStepRunsInner>>,
    #[serde(rename = "status")]
    pub status: Status,
    #[serde(rename = "result", skip_serializing_if = "Option::is_none")]
    pub result: Option<serde_json::Value>,
    #[serde(rename = "startedAt", skip_serializing_if = "Option::is_none")]
    pub started_at: Option<String>,
    #[serde(rename = "finishedAt", skip_serializing_if = "Option::is_none")]
    pub finished_at: Option<String>,
    #[serde(rename = "timeoutAt", skip_serializing_if = "Option::is_none")]
    pub timeout_at: Option<String>,
    #[serde(rename = "cancelledAt", skip_serializing_if = "Option::is_none")]
    pub cancelled_at: Option<String>,
    #[serde(rename = "cancelledReason", skip_serializing_if = "Option::is_none")]
    pub cancelled_reason: Option<String>,
    #[serde(rename = "cancelledError", skip_serializing_if = "Option::is_none")]
    pub cancelled_error: Option<String>,
}

impl WorkflowRunCreate200ResponseJobRunsInner {
    pub fn new(metadata: models::V1TaskGet200ResponseMetadata, tenant_id: String, workflow_run_id: String, job_id: String, status: Status) -> WorkflowRunCreate200ResponseJobRunsInner {
        WorkflowRunCreate200ResponseJobRunsInner {
            metadata: Box::new(metadata),
            tenant_id,
            workflow_run_id,
            workflow_run: None,
            job_id,
            job: None,
            ticker_id: None,
            step_runs: None,
            status,
            result: None,
            started_at: None,
            finished_at: None,
            timeout_at: None,
            cancelled_at: None,
            cancelled_reason: None,
            cancelled_error: None,
        }
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Status {
    #[serde(rename = "PENDING")]
    Pending,
    #[serde(rename = "RUNNING")]
    Running,
    #[serde(rename = "SUCCEEDED")]
    Succeeded,
    #[serde(rename = "FAILED")]
    Failed,
    #[serde(rename = "CANCELLED")]
    Cancelled,
    #[serde(rename = "BACKOFF")]
    Backoff,
}

impl Default for Status {
    fn default() -> Status {
        Self::Pending
    }
}

