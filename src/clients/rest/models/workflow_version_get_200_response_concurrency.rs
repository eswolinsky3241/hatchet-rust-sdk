/*
 * Hatchet API
 *
 * The Hatchet API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::clients::rest::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct WorkflowVersionGet200ResponseConcurrency {
    /// The maximum number of concurrent workflow runs.
    #[serde(rename = "maxRuns")]
    pub max_runs: i32,
    /// The strategy to use when the concurrency limit is reached.
    #[serde(rename = "limitStrategy")]
    pub limit_strategy: LimitStrategy,
    /// An action which gets the concurrency group for the WorkflowRun.
    #[serde(rename = "getConcurrencyGroup")]
    pub get_concurrency_group: String,
}

impl WorkflowVersionGet200ResponseConcurrency {
    pub fn new(max_runs: i32, limit_strategy: LimitStrategy, get_concurrency_group: String) -> WorkflowVersionGet200ResponseConcurrency {
        WorkflowVersionGet200ResponseConcurrency {
            max_runs,
            limit_strategy,
            get_concurrency_group,
        }
    }
}
/// The strategy to use when the concurrency limit is reached.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum LimitStrategy {
    #[serde(rename = "CANCEL_IN_PROGRESS")]
    CancelInProgress,
    #[serde(rename = "DROP_NEWEST")]
    DropNewest,
    #[serde(rename = "QUEUE_NEWEST")]
    QueueNewest,
    #[serde(rename = "GROUP_ROUND_ROBIN")]
    GroupRoundRobin,
}

impl Default for LimitStrategy {
    fn default() -> LimitStrategy {
        Self::CancelInProgress
    }
}

