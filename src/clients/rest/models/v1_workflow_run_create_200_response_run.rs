/*
 * Hatchet API
 *
 * The Hatchet API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::clients::rest::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct V1WorkflowRunCreate200ResponseRun {
    #[serde(rename = "metadata")]
    pub metadata: Box<models::V1TaskGet200ResponseMetadata>,
    #[serde(rename = "status")]
    pub status: Status,
    /// The timestamp the task run started.
    #[serde(rename = "startedAt", skip_serializing_if = "Option::is_none")]
    pub started_at: Option<String>,
    /// The timestamp the task run finished.
    #[serde(rename = "finishedAt", skip_serializing_if = "Option::is_none")]
    pub finished_at: Option<String>,
    /// The duration of the task run, in milliseconds.
    #[serde(rename = "duration", skip_serializing_if = "Option::is_none")]
    pub duration: Option<i64>,
    /// The ID of the tenant.
    #[serde(rename = "tenantId")]
    pub tenant_id: uuid::Uuid,
    /// Additional metadata for the task run.
    #[serde(rename = "additionalMetadata", skip_serializing_if = "Option::is_none")]
    pub additional_metadata: Option<serde_json::Value>,
    /// The display name of the task run.
    #[serde(rename = "displayName")]
    pub display_name: String,
    #[serde(rename = "workflowId")]
    pub workflow_id: uuid::Uuid,
    /// The output of the task run (for the latest run)
    #[serde(rename = "output")]
    pub output: serde_json::Value,
    /// The error message of the task run (for the latest run)
    #[serde(rename = "errorMessage", skip_serializing_if = "Option::is_none")]
    pub error_message: Option<String>,
    /// The ID of the workflow version.
    #[serde(rename = "workflowVersionId", skip_serializing_if = "Option::is_none")]
    pub workflow_version_id: Option<uuid::Uuid>,
    /// The input of the task run.
    #[serde(rename = "input")]
    pub input: serde_json::Value,
    /// The timestamp the task run was created.
    #[serde(rename = "createdAt", skip_serializing_if = "Option::is_none")]
    pub created_at: Option<String>,
    #[serde(rename = "parentTaskExternalId", skip_serializing_if = "Option::is_none")]
    pub parent_task_external_id: Option<uuid::Uuid>,
}

impl V1WorkflowRunCreate200ResponseRun {
    pub fn new(metadata: models::V1TaskGet200ResponseMetadata, status: Status, tenant_id: uuid::Uuid, display_name: String, workflow_id: uuid::Uuid, output: serde_json::Value, input: serde_json::Value) -> V1WorkflowRunCreate200ResponseRun {
        V1WorkflowRunCreate200ResponseRun {
            metadata: Box::new(metadata),
            status,
            started_at: None,
            finished_at: None,
            duration: None,
            tenant_id,
            additional_metadata: None,
            display_name,
            workflow_id,
            output,
            error_message: None,
            workflow_version_id: None,
            input,
            created_at: None,
            parent_task_external_id: None,
        }
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Status {
    #[serde(rename = "QUEUED")]
    Queued,
    #[serde(rename = "RUNNING")]
    Running,
    #[serde(rename = "COMPLETED")]
    Completed,
    #[serde(rename = "CANCELLED")]
    Cancelled,
    #[serde(rename = "FAILED")]
    Failed,
}

impl Default for Status {
    fn default() -> Status {
        Self::Queued
    }
}

