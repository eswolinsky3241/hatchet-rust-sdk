/*
 * Hatchet API
 *
 * The Hatchet API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::clients::rest::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct V1TaskEventList200ResponseRowsInner {
    #[serde(rename = "id")]
    pub id: i64,
    #[serde(rename = "taskId")]
    pub task_id: uuid::Uuid,
    #[serde(rename = "timestamp")]
    pub timestamp: String,
    #[serde(rename = "eventType")]
    pub event_type: EventType,
    #[serde(rename = "message")]
    pub message: String,
    #[serde(rename = "errorMessage", skip_serializing_if = "Option::is_none")]
    pub error_message: Option<String>,
    #[serde(rename = "output", skip_serializing_if = "Option::is_none")]
    pub output: Option<String>,
    #[serde(rename = "workerId", skip_serializing_if = "Option::is_none")]
    pub worker_id: Option<uuid::Uuid>,
    #[serde(rename = "taskDisplayName", skip_serializing_if = "Option::is_none")]
    pub task_display_name: Option<String>,
    /// The number of retries of the task.
    #[serde(rename = "retryCount", skip_serializing_if = "Option::is_none")]
    pub retry_count: Option<i32>,
    /// The attempt number of the task.
    #[serde(rename = "attempt", skip_serializing_if = "Option::is_none")]
    pub attempt: Option<i32>,
}

impl V1TaskEventList200ResponseRowsInner {
    pub fn new(
        id: i64,
        task_id: uuid::Uuid,
        timestamp: String,
        event_type: EventType,
        message: String,
    ) -> V1TaskEventList200ResponseRowsInner {
        V1TaskEventList200ResponseRowsInner {
            id,
            task_id,
            timestamp,
            event_type,
            message,
            error_message: None,
            output: None,
            worker_id: None,
            task_display_name: None,
            retry_count: None,
            attempt: None,
        }
    }
}
///
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum EventType {
    #[serde(rename = "REQUEUED_NO_WORKER")]
    RequeuedNoWorker,
    #[serde(rename = "REQUEUED_RATE_LIMIT")]
    RequeuedRateLimit,
    #[serde(rename = "SCHEDULING_TIMED_OUT")]
    SchedulingTimedOut,
    #[serde(rename = "ASSIGNED")]
    Assigned,
    #[serde(rename = "STARTED")]
    Started,
    #[serde(rename = "FINISHED")]
    Finished,
    #[serde(rename = "FAILED")]
    Failed,
    #[serde(rename = "RETRYING")]
    Retrying,
    #[serde(rename = "CANCELLED")]
    Cancelled,
    #[serde(rename = "TIMED_OUT")]
    TimedOut,
    #[serde(rename = "REASSIGNED")]
    Reassigned,
    #[serde(rename = "SLOT_RELEASED")]
    SlotReleased,
    #[serde(rename = "TIMEOUT_REFRESHED")]
    TimeoutRefreshed,
    #[serde(rename = "RETRIED_BY_USER")]
    RetriedByUser,
    #[serde(rename = "SENT_TO_WORKER")]
    SentToWorker,
    #[serde(rename = "RATE_LIMIT_ERROR")]
    RateLimitError,
    #[serde(rename = "ACKNOWLEDGED")]
    Acknowledged,
    #[serde(rename = "CREATED")]
    Created,
    #[serde(rename = "QUEUED")]
    Queued,
    #[serde(rename = "SKIPPED")]
    Skipped,
}

impl Default for EventType {
    fn default() -> EventType {
        Self::RequeuedNoWorker
    }
}
