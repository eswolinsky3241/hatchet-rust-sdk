/*
 * Hatchet API
 *
 * The Hatchet API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::clients::rest::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct V1EventList200ResponseRowsInner {
    #[serde(rename = "metadata")]
    pub metadata: Box<models::V1TaskGet200ResponseMetadata>,
    /// The key for the event.
    #[serde(rename = "key")]
    pub key: String,
    #[serde(rename = "tenant", skip_serializing_if = "Option::is_none")]
    pub tenant: Option<Box<models::V1EventList200ResponseRowsInnerTenant>>,
    /// The ID of the tenant associated with this event.
    #[serde(rename = "tenantId")]
    pub tenant_id: String,
    #[serde(rename = "workflowRunSummary")]
    pub workflow_run_summary: Box<models::V1EventList200ResponseRowsInnerWorkflowRunSummary>,
    /// Additional metadata for the event.
    #[serde(rename = "additionalMetadata", skip_serializing_if = "Option::is_none")]
    pub additional_metadata: Option<serde_json::Value>,
    /// The payload of the event, which can be any JSON-serializable object.
    #[serde(rename = "payload", skip_serializing_if = "Option::is_none")]
    pub payload: Option<serde_json::Value>,
    /// The scope of the event, which can be used to filter or categorize events.
    #[serde(rename = "scope", skip_serializing_if = "Option::is_none")]
    pub scope: Option<String>,
    /// The timestamp when the event was seen.
    #[serde(rename = "seenAt", skip_serializing_if = "Option::is_none")]
    pub seen_at: Option<String>,
    /// The external IDs of the runs that were triggered by this event.
    #[serde(rename = "triggeredRuns", skip_serializing_if = "Option::is_none")]
    pub triggered_runs: Option<Vec<models::V1EventList200ResponseRowsInnerTriggeredRunsInner>>,
    /// The name of the webhook that triggered this event, if applicable.
    #[serde(
        rename = "triggeringWebhookName",
        skip_serializing_if = "Option::is_none"
    )]
    pub triggering_webhook_name: Option<String>,
}

impl V1EventList200ResponseRowsInner {
    pub fn new(
        metadata: models::V1TaskGet200ResponseMetadata,
        key: String,
        tenant_id: String,
        workflow_run_summary: models::V1EventList200ResponseRowsInnerWorkflowRunSummary,
    ) -> V1EventList200ResponseRowsInner {
        V1EventList200ResponseRowsInner {
            metadata: Box::new(metadata),
            key,
            tenant: None,
            tenant_id,
            workflow_run_summary: Box::new(workflow_run_summary),
            additional_metadata: None,
            payload: None,
            scope: None,
            seen_at: None,
            triggered_runs: None,
            triggering_webhook_name: None,
        }
    }
}
