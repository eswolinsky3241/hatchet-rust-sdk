/*
 * Hatchet API
 *
 * The Hatchet API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::clients::rest::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct WorkerList200ResponseRowsInner {
    #[serde(rename = "metadata")]
    pub metadata: Box<models::V1TaskGet200ResponseMetadata>,
    /// The name of the worker.
    #[serde(rename = "name")]
    pub name: String,
    #[serde(rename = "type")]
    pub r#type: Type,
    /// The time this worker last sent a heartbeat.
    #[serde(rename = "lastHeartbeatAt", skip_serializing_if = "Option::is_none")]
    pub last_heartbeat_at: Option<String>,
    /// The time this worker last sent a heartbeat.
    #[serde(
        rename = "lastListenerEstablished",
        skip_serializing_if = "Option::is_none"
    )]
    pub last_listener_established: Option<String>,
    /// The actions this worker can perform.
    #[serde(rename = "actions", skip_serializing_if = "Option::is_none")]
    pub actions: Option<Vec<String>>,
    /// The semaphore slot state for the worker.
    #[serde(rename = "slots", skip_serializing_if = "Option::is_none")]
    pub slots: Option<Vec<models::WorkerList200ResponseRowsInnerSlotsInner>>,
    /// The recent step runs for the worker.
    #[serde(rename = "recentStepRuns", skip_serializing_if = "Option::is_none")]
    pub recent_step_runs: Option<Vec<models::WorkerList200ResponseRowsInnerRecentStepRunsInner>>,
    /// The status of the worker.
    #[serde(rename = "status", skip_serializing_if = "Option::is_none")]
    pub status: Option<Status>,
    /// The maximum number of runs this worker can execute concurrently.
    #[serde(rename = "maxRuns", skip_serializing_if = "Option::is_none")]
    pub max_runs: Option<i32>,
    /// The number of runs this worker can execute concurrently.
    #[serde(rename = "availableRuns", skip_serializing_if = "Option::is_none")]
    pub available_runs: Option<i32>,
    /// the id of the assigned dispatcher, in UUID format
    #[serde(rename = "dispatcherId", skip_serializing_if = "Option::is_none")]
    pub dispatcher_id: Option<uuid::Uuid>,
    /// The current label state of the worker.
    #[serde(rename = "labels", skip_serializing_if = "Option::is_none")]
    pub labels: Option<Vec<models::WorkerList200ResponseRowsInnerLabelsInner>>,
    /// The webhook URL for the worker.
    #[serde(rename = "webhookUrl", skip_serializing_if = "Option::is_none")]
    pub webhook_url: Option<String>,
    /// The webhook ID for the worker.
    #[serde(rename = "webhookId", skip_serializing_if = "Option::is_none")]
    pub webhook_id: Option<uuid::Uuid>,
    #[serde(rename = "runtimeInfo", skip_serializing_if = "Option::is_none")]
    pub runtime_info: Option<Box<models::WorkerList200ResponseRowsInnerRuntimeInfo>>,
}

impl WorkerList200ResponseRowsInner {
    pub fn new(
        metadata: models::V1TaskGet200ResponseMetadata,
        name: String,
        r#type: Type,
    ) -> WorkerList200ResponseRowsInner {
        WorkerList200ResponseRowsInner {
            metadata: Box::new(metadata),
            name,
            r#type,
            last_heartbeat_at: None,
            last_listener_established: None,
            actions: None,
            slots: None,
            recent_step_runs: None,
            status: None,
            max_runs: None,
            available_runs: None,
            dispatcher_id: None,
            labels: None,
            webhook_url: None,
            webhook_id: None,
            runtime_info: None,
        }
    }
}
///
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "SELFHOSTED")]
    Selfhosted,
    #[serde(rename = "MANAGED")]
    Managed,
    #[serde(rename = "WEBHOOK")]
    Webhook,
}

impl Default for Type {
    fn default() -> Type {
        Self::Selfhosted
    }
}
/// The status of the worker.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Status {
    #[serde(rename = "ACTIVE")]
    Active,
    #[serde(rename = "INACTIVE")]
    Inactive,
    #[serde(rename = "PAUSED")]
    Paused,
}

impl Default for Status {
    fn default() -> Status {
        Self::Active
    }
}
