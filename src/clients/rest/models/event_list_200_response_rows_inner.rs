/*
 * Hatchet API
 *
 * The Hatchet API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::clients::rest::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct EventList200ResponseRowsInner {
    #[serde(rename = "metadata")]
    pub metadata: Box<models::V1TaskGet200ResponseMetadata>,
    /// The key for the event.
    #[serde(rename = "key")]
    pub key: String,
    #[serde(rename = "tenant", skip_serializing_if = "Option::is_none")]
    pub tenant: Option<Box<models::V1EventList200ResponseRowsInnerTenant>>,
    /// The ID of the tenant associated with this event.
    #[serde(rename = "tenantId")]
    pub tenant_id: String,
    #[serde(rename = "workflowRunSummary", skip_serializing_if = "Option::is_none")]
    pub workflow_run_summary: Option<Box<models::EventList200ResponseRowsInnerWorkflowRunSummary>>,
    /// Additional metadata for the event.
    #[serde(rename = "additionalMetadata", skip_serializing_if = "Option::is_none")]
    pub additional_metadata: Option<serde_json::Value>,
}

impl EventList200ResponseRowsInner {
    pub fn new(metadata: models::V1TaskGet200ResponseMetadata, key: String, tenant_id: String) -> EventList200ResponseRowsInner {
        EventList200ResponseRowsInner {
            metadata: Box::new(metadata),
            key,
            tenant: None,
            tenant_id,
            workflow_run_summary: None,
            additional_metadata: None,
        }
    }
}

