/*
 * Hatchet API
 *
 * The Hatchet API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::clients::rest::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct V1WebhookCreateRequestOneOf2AllOfAuth {
    /// The HMAC algorithm to use for the webhook
    #[serde(rename = "algorithm")]
    pub algorithm: Algorithm,
    /// The encoding to use for the HMAC signature
    #[serde(rename = "encoding")]
    pub encoding: Encoding,
    /// The name of the header to use for the HMAC signature
    #[serde(rename = "signatureHeaderName")]
    pub signature_header_name: String,
    /// The secret key used to sign the HMAC signature
    #[serde(rename = "signingSecret")]
    pub signing_secret: String,
}

impl V1WebhookCreateRequestOneOf2AllOfAuth {
    pub fn new(
        algorithm: Algorithm,
        encoding: Encoding,
        signature_header_name: String,
        signing_secret: String,
    ) -> V1WebhookCreateRequestOneOf2AllOfAuth {
        V1WebhookCreateRequestOneOf2AllOfAuth {
            algorithm,
            encoding,
            signature_header_name,
            signing_secret,
        }
    }
}
/// The HMAC algorithm to use for the webhook
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Algorithm {
    #[serde(rename = "SHA1")]
    Sha1,
    #[serde(rename = "SHA256")]
    Sha256,
    #[serde(rename = "SHA512")]
    Sha512,
    #[serde(rename = "MD5")]
    Md5,
}

impl Default for Algorithm {
    fn default() -> Algorithm {
        Self::Sha1
    }
}
/// The encoding to use for the HMAC signature
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Encoding {
    #[serde(rename = "HEX")]
    Hex,
    #[serde(rename = "BASE64")]
    Base64,
    #[serde(rename = "BASE64URL")]
    Base64Url,
}

impl Default for Encoding {
    fn default() -> Encoding {
        Self::Hex
    }
}
