/*
 * Hatchet API
 *
 * The Hatchet API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::clients::rest::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct V1FilterList200ResponseRowsInner {
    #[serde(rename = "metadata")]
    pub metadata: Box<models::V1TaskGet200ResponseMetadata>,
    /// The ID of the tenant associated with this filter.
    #[serde(rename = "tenantId")]
    pub tenant_id: String,
    /// The workflow id associated with this filter.
    #[serde(rename = "workflowId")]
    pub workflow_id: uuid::Uuid,
    /// The scope associated with this filter. Used for subsetting candidate filters at evaluation time
    #[serde(rename = "scope")]
    pub scope: String,
    /// The expression associated with this filter.
    #[serde(rename = "expression")]
    pub expression: String,
    /// Additional payload data associated with the filter
    #[serde(rename = "payload")]
    pub payload: serde_json::Value,
}

impl V1FilterList200ResponseRowsInner {
    pub fn new(metadata: models::V1TaskGet200ResponseMetadata, tenant_id: String, workflow_id: uuid::Uuid, scope: String, expression: String, payload: serde_json::Value) -> V1FilterList200ResponseRowsInner {
        V1FilterList200ResponseRowsInner {
            metadata: Box::new(metadata),
            tenant_id,
            workflow_id,
            scope,
            expression,
            payload,
        }
    }
}

