/*
 * Hatchet API
 *
 * The Hatchet API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */


use reqwest;
use serde::{Deserialize, Serialize, de::Error as _};
use crate::clients::rest::{apis::ResponseContent, models};
use super::{Error, configuration, ContentType};


/// struct for typed errors of method [`step_run_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum StepRunGetError {
    Status400(models::V1TaskGet400Response),
    Status403(models::V1TaskGet400Response),
    Status404(models::V1TaskGet400Response),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`step_run_get_schema`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum StepRunGetSchemaError {
    Status400(models::V1TaskGet400Response),
    Status403(models::V1TaskGet400Response),
    Status404(models::V1TaskGet400Response),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`step_run_list_archives`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum StepRunListArchivesError {
    Status400(models::V1TaskGet400Response),
    Status403(models::V1TaskGet400Response),
    Status404(models::V1TaskGet400Response),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`step_run_list_events`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum StepRunListEventsError {
    Status400(models::V1TaskGet400Response),
    Status403(models::V1TaskGet400Response),
    Status404(models::V1TaskGet400Response),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`step_run_update_cancel`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum StepRunUpdateCancelError {
    Status400(models::V1TaskGet400Response),
    Status403(models::V1TaskGet400Response),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`step_run_update_rerun`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum StepRunUpdateRerunError {
    Status400(models::V1TaskGet400Response),
    Status403(models::V1TaskGet400Response),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`workflow_run_list_step_run_events`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum WorkflowRunListStepRunEventsError {
    Status400(models::V1TaskGet400Response),
    Status403(models::V1TaskGet400Response),
    Status404(models::V1TaskGet400Response),
    UnknownValue(serde_json::Value),
}


/// Get a step run by id
pub async fn step_run_get(configuration: &configuration::Configuration, tenant: &str, step_run: &str) -> Result<models::StepRunGet200Response, Error<StepRunGetError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_tenant = tenant;
    let p_step_run = step_run;

    let uri_str = format!("{}/api/v1/tenants/{tenant}/step-runs/{step_run}", configuration.base_path, tenant=crate::clients::rest::apis::urlencode(p_tenant), step_run=crate::clients::rest::apis::urlencode(p_step_run));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::StepRunGet200Response`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::StepRunGet200Response`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<StepRunGetError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Get the schema for a step run
pub async fn step_run_get_schema(configuration: &configuration::Configuration, tenant: &str, step_run: &str) -> Result<serde_json::Value, Error<StepRunGetSchemaError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_tenant = tenant;
    let p_step_run = step_run;

    let uri_str = format!("{}/api/v1/tenants/{tenant}/step-runs/{step_run}/schema", configuration.base_path, tenant=crate::clients::rest::apis::urlencode(p_tenant), step_run=crate::clients::rest::apis::urlencode(p_step_run));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `serde_json::Value`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `serde_json::Value`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<StepRunGetSchemaError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// List archives for a step run
pub async fn step_run_list_archives(configuration: &configuration::Configuration, step_run: &str, offset: Option<i64>, limit: Option<i64>) -> Result<models::StepRunListArchives200Response, Error<StepRunListArchivesError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_step_run = step_run;
    let p_offset = offset;
    let p_limit = limit;

    let uri_str = format!("{}/api/v1/step-runs/{step_run}/archives", configuration.base_path, step_run=crate::clients::rest::apis::urlencode(p_step_run));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_offset {
        req_builder = req_builder.query(&[("offset", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_limit {
        req_builder = req_builder.query(&[("limit", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::StepRunListArchives200Response`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::StepRunListArchives200Response`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<StepRunListArchivesError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// List events for a step run
pub async fn step_run_list_events(configuration: &configuration::Configuration, step_run: &str, offset: Option<i64>, limit: Option<i64>) -> Result<models::StepRunListEvents200Response, Error<StepRunListEventsError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_step_run = step_run;
    let p_offset = offset;
    let p_limit = limit;

    let uri_str = format!("{}/api/v1/step-runs/{step_run}/events", configuration.base_path, step_run=crate::clients::rest::apis::urlencode(p_step_run));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_offset {
        req_builder = req_builder.query(&[("offset", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_limit {
        req_builder = req_builder.query(&[("limit", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::StepRunListEvents200Response`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::StepRunListEvents200Response`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<StepRunListEventsError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Attempts to cancel a step run
pub async fn step_run_update_cancel(configuration: &configuration::Configuration, tenant: &str, step_run: &str) -> Result<models::StepRunGet200Response, Error<StepRunUpdateCancelError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_tenant = tenant;
    let p_step_run = step_run;

    let uri_str = format!("{}/api/v1/tenants/{tenant}/step-runs/{step_run}/cancel", configuration.base_path, tenant=crate::clients::rest::apis::urlencode(p_tenant), step_run=crate::clients::rest::apis::urlencode(p_step_run));
    let mut req_builder = configuration.client.request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::StepRunGet200Response`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::StepRunGet200Response`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<StepRunUpdateCancelError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Reruns a step run
pub async fn step_run_update_rerun(configuration: &configuration::Configuration, tenant: &str, step_run: &str, step_run_update_rerun_request: models::StepRunUpdateRerunRequest) -> Result<models::StepRunGet200Response, Error<StepRunUpdateRerunError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_tenant = tenant;
    let p_step_run = step_run;
    let p_step_run_update_rerun_request = step_run_update_rerun_request;

    let uri_str = format!("{}/api/v1/tenants/{tenant}/step-runs/{step_run}/rerun", configuration.base_path, tenant=crate::clients::rest::apis::urlencode(p_tenant), step_run=crate::clients::rest::apis::urlencode(p_step_run));
    let mut req_builder = configuration.client.request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    req_builder = req_builder.json(&p_step_run_update_rerun_request);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::StepRunGet200Response`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::StepRunGet200Response`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<StepRunUpdateRerunError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// List events for all step runs for a workflow run
pub async fn workflow_run_list_step_run_events(configuration: &configuration::Configuration, tenant: &str, workflow_run: &str, last_id: Option<i32>) -> Result<models::StepRunListEvents200Response, Error<WorkflowRunListStepRunEventsError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_tenant = tenant;
    let p_workflow_run = workflow_run;
    let p_last_id = last_id;

    let uri_str = format!("{}/api/v1/tenants/{tenant}/workflow-runs/{workflow_run}/step-run-events", configuration.base_path, tenant=crate::clients::rest::apis::urlencode(p_tenant), workflow_run=crate::clients::rest::apis::urlencode(p_workflow_run));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_last_id {
        req_builder = req_builder.query(&[("lastId", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::StepRunListEvents200Response`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::StepRunListEvents200Response`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<WorkflowRunListStepRunEventsError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

